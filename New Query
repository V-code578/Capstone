Order.cs:
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OnlineShopping.Models
{
    [Table("Order")]
    public class Order
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int OrderId { get; set; }

        [ForeignKey("User")]
        public string UserName { get; set; }

        public virtual User? User { get; set; }

        [Required]
        [StringLength(50)]
        public string OrderAddress { get; set; }

        [Required]
        public DateTime OrderDate { get; set; }

        [Required]
        [Column(TypeName = "decimal(18, 2)")] // Adjust precision and scale as needed
        public decimal TotalAmount { get; set; }

        [Required]
        [StringLength(20)]
        public string OrderStatus { get; set; }


    }
}


EFOrderRepo.cs:
using Microsoft.EntityFrameworkCore;
using OnlineShopping.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OnlineShopping.Repos
{
    public class EFOrderRepo : IOrderRepo
    {
        OnlineShoppingDbContext ctx = new OnlineShoppingDbContext();
        public async Task AddOrder(Order order)
        {
            try
            {
                ctx.Orders.Add(order);
                await ctx.SaveChangesAsync();
            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message);
            }
        }

        public async Task CancelOrder(int orderId)
        {
            try
            {
                Order order = await GetOrderById(orderId);
                ctx.Orders.Remove(order);
                await ctx.SaveChangesAsync();
            }
            catch (Exception)
            {

                throw new Exception("OrderId is not found");
            }
        }

        public async Task<Order> GetOrderById(int orderId)
        {
            try
            {
                Order order = await (from o in ctx.Orders where o.OrderId == orderId select o).FirstAsync();
                return order;
            }
            catch (Exception)
            {

                throw new Exception("No Order found with this Order Id");
            }
        }

        public async Task<List<Order>> GetOrdersByUserName(string userName)
        {
            try
            {
                List<Order> orders = await (from o in ctx.Orders where o.UserName==userName select o).ToListAsync();
                return orders;
            }
            catch (Exception)
            {

                throw new Exception("No Order found with this User Id");
            }
        }

        public async Task UpdateOrder(int OrderId, Order order)
        {
            try
            {
                Order order1 = await GetOrderById(OrderId);
                order1.OrderAddress = order.OrderAddress;
                order1.OrderDate = order.OrderDate;
                order1.TotalAmount = order.TotalAmount;
                order1.OrderStatus = order.OrderStatus;
                await ctx.SaveChangesAsync();
            }
            catch (Exception)
            {

                throw new Exception("No Order found with this Order Id");
            }
        }
    }
}

OrderController.cs:
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using OnlineShopping.Models;
using OnlineShopping.Repos;

namespace webapi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class OrderController : ControllerBase
    {
        IOrderRepo orderRepo;
        public OrderController(IOrderRepo repo)
        {
            orderRepo = repo;

        }
        [HttpGet]
        public async Task<ActionResult> GetByUserId(string userName)
        {
            try
            {
                List<Order> orders = await orderRepo.GetOrdersByUserName(userName);
                return Ok(orders);
            }
            catch (Exception ex)
            {
                return NotFound(ex.Message);
            }
        }
        [HttpGet("{orderId}")]
        public async Task<ActionResult> GetByOrderId(int orderId)
        {
            try
            {
                Order orders = await orderRepo.GetOrderById(orderId);
                return Ok(orders);
            }
            catch (Exception ex)
            {
                return NotFound(ex.Message);
            }

        }
        [HttpPost]
        public async Task<ActionResult> Insert(Order order)
        {
            await orderRepo.AddOrder(order);
            return Created($"api/order/{order.OrderId}", order);
        }

        [HttpPut]
        public async Task<ActionResult> Update(int OrderId, Order order)
        {
            await orderRepo.UpdateOrder(OrderId, order);
            return Ok(order);
        }

        [HttpDelete]
        public async Task<ActionResult> Delete(int orderId)
        {
            await orderRepo.CancelOrder(orderId);
            return Ok();
        }
    }
}
Cart.jsx:
import React, { useState, useEffect } from 'react';
import { Container, Table, Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

const Cart = (props) => {
    const [cartItems, setCartItems] = useState([]);
    const navigate = useNavigate();

    useEffect(() => {
        fetchCartItems();
    }, []);

    const fetchCartItems = async () => {
        try {
            const loggedInUser = sessionStorage.getItem('username');

            // Fetch cart items for the logged in user
            const cartResponse = await fetch(`https://localhost:7075/api/Cart/CartByName/${loggedInUser}`);
            const cartData = await cartResponse.json();

            // Fetch product details for each item in the cart
            const cartItemsWithDetails = await Promise.all(
                cartData.map(async (item) => {
                    // Fetch product details using productId
                    const productResponse = await fetch(`https://localhost:7075/api/Product/ProductById/${item.productId}`);
                    const productData = await productResponse.json();

                    return {
                        ...item,
                        image: productData.imagePath, // Assuming the image path is provided by the API
                        name: productData.productName,
                        price: productData.price
                    };
                })
            );

            setCartItems(cartItemsWithDetails);
        } catch (error) {
            console.error('Error fetching cart items:', error);
        }
    };

    const removeFromCart = async (productId) => {
        try {
            const loggedInUser = sessionStorage.getItem('username');
            const response = await fetch(`https://localhost:7075/api/Cart/Remove?username=${loggedInUser}&productId=${productId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
        });
        if (response.ok) {
            console.log('Item removed from cart:', productId);
            fetchCartItems(); // Fetch updated cart items after removing
        } else {
            console.error('Failed to remove item from cart:', response.statusText);
        }
    } catch (error) {
        console.error('Error removing item from cart:', error);
    }
    };

    const clearCart = async () => {
        try {
            const loggedInUser = sessionStorage.getItem('username');
            const response = await fetch(`https://localhost:7075/api/Cart/Clear/${loggedInUser}`, {
                method: 'DELETE'
            });
            if (response.ok) {
                console.log('Cart cleared');
                setCartItems([]); // Clear cart items in the state
            } else {
                console.error('Failed to clear cart:', response.statusText);
            }
        } catch (error) {
            console.error('Error clearing cart:', error);
        }
    };

    const checkout = async () => {
        try {
            const loggedInUser = sessionStorage.getItem('username');
            const response = await fetch(`https://localhost:7075/api/Cart/Checkout/${loggedInUser}`, {
                method: 'POST'
            });
            if (response.ok) {
                console.log('Checkout successful');
                navigate('/checkout-success'); // Navigate to checkout success page
            } else {
                console.error('Failed to checkout:', response.statusText);
            }
        } catch (error) {
            console.error('Error during checkout:', error);
        }
    };

    return (
        <Container>
            <h2 className="my-4">Cart</h2>
            {cartItems.length > 0 ? (
                <Table striped bordered hover>
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {cartItems.map((item, index) => (
                            <tr key={`${item.username}-${item.productId}-${index}`}>
                                <td><img src={`/assets/${item.image}`} alt={item.name} style={{ width: '50px', height: 'auto' }} /></td>
                                <td>{item.name}</td>
                                <td>${item.price}</td>
                                <td>
                                    <Button variant="danger" onClick={() => removeFromCart(item.productId)}>Remove</Button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </Table>
            ) : (
                <p>Your cart is empty.</p>
            )}
            <Button variant="primary" onClick={checkout}>Checkout</Button>
            <Button variant="danger" onClick={clearCart}>Clear Cart</Button>
        </Container>
    );
};

export default Cart;

App.jsx:
import React, { useState } from "react";
import { BrowserRouter as Router, Route, Routes, Navigate } from "react-router-dom";
import RegisterPage from "./RegisterPage";
import LoginPage from "./LoginPage";
import ForgotPasswordPage from "./ForgotPasswordPage";
import Home from "./Home";
import NavbarBefore from "./NavbarBefore";
import NavbarAfterAdmin from "./NavbarAfterAdmin";
import NavbarAfter from "./NavbarAfter";
import Footer from "./Footer";
import AdminProducts from "./AdminProducts";
import AdminCategories from "./AdminCategories"; 
import AdminUsers from "./AdminUsers";
import MensShirts from "./MensShirts";
import MensTrousers from "./MensTrousers";
import ElectronicWatches from "./ElectronicWatches";
import Mobiles from "./Mobiles";
import Laptops from "./Laptops";
import WomensClothes from "./WomensClothes";
import MensShoes from "./MensShoes";
import WomensSneakers from "./WomensSneakers";
import Cart from "./Cart";
import WishList from "./WishList";

const App = () => {
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [isAdmin, setIsAdmin] = useState(false);

    const handleLogout = () => {
        setIsLoggedIn(false);
        setIsAdmin(false);
        sessionStorage.removeItem("isAdmin");
        return <Navigate to="/" />;
    };

    return (
        <Router>
            {isLoggedIn && isAdmin ? (
                <NavbarAfterAdmin userName="Admin" setLoggedIn={handleLogout} />
            ) : isLoggedIn ? (
                <NavbarAfter userName="User" setLoggedIn={handleLogout} />
            ) : (
                <NavbarBefore setLoggedIn={setIsLoggedIn} />
            )}

            <Routes>
                <Route path="/register" element={<RegisterPage />} />
                <Route path="/login" element={<LoginPage setLoggedIn={setIsLoggedIn} setIsAdmin={setIsAdmin} />} />
                <Route path="/AdminProducts" element={<AdminProducts setLoggedIn={setIsLoggedIn} setIsAdmin={setIsAdmin} />} />
                <Route path="/AdminCategories" element={<AdminCategories setLoggedIn={setIsLoggedIn} setIsAdmin={setIsAdmin} />} />
                <Route path="/AdminUsers" element={<AdminUsers setLoggedIn={setIsLoggedIn} setIsAdmin={setIsAdmin} />} />
                <Route path="/forgot-password" element={<ForgotPasswordPage />} />
                <Route path="/MensShirts" element={<MensShirts />} />
                <Route path="/MensTrousers" element={<MensTrousers />} />
                <Route path="/ElectronicWatches" element={<ElectronicWatches />} />
                <Route path="/Mobiles" element={<Mobiles />} />
                <Route path="/Laptops" element={<Laptops />} />
                <Route path="/WomensClothes" element={<WomensClothes />} />
                <Route path="/MensShoes" element={<MensShoes />} />
                <Route path="/WomensSneakers" element={<WomensSneakers />} />
                <Route path="/Cart" element={<Cart setLoggedIn={setIsLoggedIn} />} />
                <Route path="/WishList" element={<WishList setLoggedIn={setIsLoggedIn} />} />
                <Route path="/" element={<Home />} />
            </Routes>
            <br />
            <Footer />
        </Router>
    );
};

export default App;
When i click on Checkout button in Cart.jsx page it should navigate to Checkout page. By using all the files please create a checkout(order) Page which asks user to enter Address, Payment Method: Cash On Delivery, Total Amount should be calculated from cart page by adding each items price and passed to Checkout or order page, Order Now button.

 Once Enter all the data and click on Order Now button. All the details should be stored in Order Model(table).

