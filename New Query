// ...

[HttpPost]
[Consumes("multipart/form-data")]
public async Task<ActionResult> AddProduct([FromForm] IFormFile file, [FromForm] Product product)
{
    if (file == null || product == null)
    {
        return BadRequest();
    }

    try
    {
        // Save the file to a local path
        var filePath = Path.Combine("YourLocalImagePath", file.FileName);
        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await file.CopyToAsync(stream);
        }

        // Set the file path in the product
        product.ImagePath = filePath;

        await _productRepo.AddProduct(product);
        return Created($"api/product/{product.ProductId}", product);
    }
    catch (Exception ex)
    {
        return StatusCode(500, ex.Message);
    }
}

[HttpPut("{productId}")]
public async Task<ActionResult> UpdateProduct(int productId, [FromForm] IFormFile productImage, [FromForm] Product product)
{
    try
    {
        if (productImage != null)
        {
            // Save the new file to a local path
            var filePath = Path.Combine("YourLocalImagePath", productImage.FileName);
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await productImage.CopyToAsync(stream);
            }

            // Set the new file path in the product
            product.ImagePath = filePath;
        }

        await _productRepo.UpdateProduct(productId, product);
        return Ok(product);
    }
    catch (Exception ex)
    {
        return StatusCode(500, ex.Message);
    }
}

// ...

// ...

const handleSubmit = async (event) => {
    event.preventDefault();

    const formData = new FormData();
    formData.append("productName", productData.productName);
    formData.append("description", productData.description);
    formData.append("price", productData.price);
    formData.append("categoryId", productData.categoryId);
    formData.append("file", productData.file); // Append the file directly

    try {
        const response = await fetch("http://localhost:5183/api/Product", {
            method: "POST",
            body: formData,
        });

        if (response.ok) {
            alert("Product added successfully!");
            // Clear form fields after successful submission
            setProductData({
                productName: "",
                description: "",
                price: 0,
                categoryId: 0,
                file: null,
            });
        } else {
            throw new Error("Failed to add product. Please try again.");
        }
    } catch (error) {
        console.error("Error adding product:", error);
        alert("Failed to add product. Please try again.");
    }
};

// ...



import React, { useState } from "react";

const AdminProducts = () => {
  const [productData, setProductData] = useState({
    productName: "",
    description: "",
    price: 0,
    categoryId: 0,
    file: null,
  });

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setProductData({
      ...productData,
      [name]: value,
    });
  };

  const handleFileChange = (event) => {
    setProductData({
      ...productData,
      file: event.target.files[0],
    });
  };

  const handleSubmit = async (event) => {
    event.preventDefault();

    const formData = new FormData();
    formData.append("productName", productData.productName);
    formData.append("description", productData.description);
    formData.append("price", productData.price);
    formData.append("categoryId", productData.categoryId);
    formData.append("file", productData.file); // Append the file directly

    try {
      const response = await fetch("http://localhost:5183/api/Product", {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        alert("Product added successfully!");
        // Clear form fields after successful submission
        setProductData({
          productName: "",
          description: "",
          price: 0,
          categoryId: 0,
          file: null,
        });
      } else {
        throw new Error("Failed to add product. Please try again.");
      }
    } catch (error) {
      console.error("Error adding product:", error);
      alert("Failed to add product. Please try again.");
    }
  };

  return (
    <div>
      <h1>Add Product</h1>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Product Name:</label>
          <input
            type="text"
            name="productName"
            value={productData.productName}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label>Description:</label>
          <input
            type="text"
            name="description"
            value={productData.description}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label>Price:</label>
          <input
            type="number"
            name="price"
            value={productData.price}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label>Category ID:</label>
          <input
            type="number"
            name="categoryId"
            value={productData.categoryId}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label>Image:</label>
          <input type="file" onChange={handleFileChange} />
        </div>
        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

export default AdminProducts;


import React, { useState } from "react";

const AdminProducts = () => {
  const [productData, setProductData] = useState({
    productName: "",
    description: "",
    price: 0,
    categoryId: 0,
    imagePath: "", // Add imagePath field
  });

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setProductData({
      ...productData,
      [name]: value,
    });
  };

  const handleSubmit = async (event) => {
    event.preventDefault();

    const formData = new FormData();
    formData.append("productName", productData.productName);
    formData.append("description", productData.description);
    formData.append("price", productData.price);
    formData.append("categoryId", productData.categoryId);
    formData.append("imagePath", productData.imagePath); // Append the image path

    try {
      const response = await fetch("http://localhost:5183/api/Product", {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        alert("Product added successfully!");
        // Clear form fields after successful submission
        setProductData({
          productName: "",
          description: "",
          price: 0,
          categoryId: 0,
          imagePath: "", // Clear image path field
        });
      } else {
        throw new Error("Failed to add product. Please try again.");
      }
    } catch (error) {
      console.error("Error adding product:", error);
      alert("Failed to add product. Please try again.");
    }
  };

  return (
    <div>
      <h1>Add Product</h1>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Product Name:</label>
          <input
            type="text"
            name="productName"
            value={productData.productName}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label>Description:</label>
          <input
            type="text"
            name="description"
            value={productData.description}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label>Price:</label>
          <input
            type="number"
            name="price"
            value={productData.price}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label>Category ID:</label>
          <input
            type="number"
            name="categoryId"
            value={productData.categoryId}
            onChange={handleInputChange}
          />
        </div>
        <div>
          <label>Image Path:</label>
          <input
            type="text"
            name="imagePath"
            value={productData.imagePath}
            onChange={handleInputChange}
          />
        </div>
        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

export default AdminProducts;
