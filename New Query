import React, { useState, useEffect } from 'react';
import "./AdminUsers.css";

function AdminUsers() {
    const [users, setUsers] = useState([]);
    const [user, setUser] = useState({ userName: '', password: '' });
    const [successMessage, setSuccessMessage] = useState('');

    useEffect(() => {
        fetchUsers();
    }, []);

    const fetchUsers = () => {
        fetch('http://localhost:5183/api/User')
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Failed to fetch users');
                }
                return response.json();
            })
            .then((data) => {
                setUsers(data);
            })
            .catch((error) => {
                console.error('Error fetching users:', error);
            });
    };

    const deleteUser = (userName) => {
        fetch('http://localhost:5183/api/User/' + userName, {
            method: 'DELETE',
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Failed to delete user');
                }
                setSuccessMessage('User deleted successfully');
                return response.text();
            })
            .then(() => {
                setUsers(users.filter((u) => u.userName !== userName));
            })
            .catch((error) => {
                console.error('Error deleting user:', error);
            });
    };

    const addUser = () => {
        fetch('http://localhost:5183/api/User/AddUser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userName: user.userName, password: user.password }),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Failed to add user');
                }
                setSuccessMessage('User added successfully');
                return response.json();
            })
            .then((data) => {
                setUsers([...users, data]);
                setUser({ userName: '', password: '' });
            })
            .catch((error) => {
                console.error('Error adding user:', error);
            });
    };

    const updateUser = (userName) => {
        fetch('http://localhost:5183/api/User/ForgotPassword', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(user),
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Failed to update user');
                }
                setSuccessMessage('User updated successfully');
                return response.json();
            })
            .then((data) => {
                setUsers(users.map((u) => (u.userName === userName ? data : u)));
                setUser({ userName: '', password: '' });
            })
            .catch((error) => {
                console.error('Error updating user:', error);
            });
    };

    const showUserByUsername = (userName) => {
        fetch('http://localhost:5183/api/User/GetUserByName/' + userName)
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Failed to fetch user');
                }
                return response.json();
            })
            .then((data) => {
                alert(`Username: ${data.userName}\nPassword: ${data.password}`);
            })
            .catch((error) => {
                console.error('Error fetching user:', error);
            });
    };

    return (
        <div className="container mt-4">
            <h2 className="main-heading">Admin Users</h2>
            <div className="underline"></div>
            {successMessage && (
                <div className="alert alert-success" role="alert">
                    {successMessage}
                </div>
            )}
            <form>
                <div className="mb-3">
                    <label htmlFor="userName" className="form-label">
                        UserName:
                    </label>
                    <input
                        type="text"
                        className="form-control"
                        id="userName"
                        value={user.userName}
                        onChange={(e) =>
                            setUser((prev) => ({ ...prev, userName: e.target.value }))
                        }
                    />
                </div>
                <div className="mb-3">
                    <label htmlFor="password" className="form-label">
                        Password:
                    </label>
                    <input
                        type="password"
                        className="form-control"
                        id="password"
                        value={user.password}
                        onChange={(e) =>
                            setUser((prev) => ({ ...prev, password: e.target.value }))
                        }
                    />
                </div>
                <button
                    type="button"
                    className="btn btn-primary"
                    onClick={fetchUsers}
                >
                    Show All Users
                </button>
                <button
                    type="button"
                    className="btn btn-success ms-2"
                    onClick={addUser}
                >
                    Add User
                </button>
                <button
                    type="button"
                    className="btn btn-warning ms-2"
                    onClick={() => updateUser(user.userName)}
                >
                    Update User
                </button>
                <button
                    type="button"
                    className="btn btn-info ms-2"
                    onClick={() => showUserByUsername(user.userName)}
                >
                    Show Single User
                </button>
            </form>
            <h3 className="mt-4">List of Users</h3>
            <table className="table">
                <thead>
                    <tr>
                        <th>UserName</th>
                        <th>Password</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    {users.map((user) => (
                        <tr key={user.userName}>
                            <td>{user.userName}</td>
                            <td>{user.password}</td>
                            <td>
                                <button
                                    type="button"
                                    className="btn btn-danger"
                                    onClick={() => deleteUser(user.userName)}
                                >
                                    Delete
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
}

export default AdminUsers;

UserController.cs:
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using OnlineShopping.Models;
using OnlineShopping.Repos;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace webapi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly IUserRepo _userRepo;

        public UserController(IUserRepo repo)
        {
            _userRepo = repo;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            List<User> users = await _userRepo.GetAllUsers();
            return Ok(users);
        }

        [HttpGet("{userName}")]
        public async Task<ActionResult> GetOne(string userName)
        {
            try
            {
                User user = await _userRepo.GetUserByUsername(userName);
                if (user != null)
                {
                    return Ok(user);
                }
                else
                {
                    return NotFound("User not found");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpGet("GetUserByName/{username}")]
        public async Task<ActionResult> GetOneUser(string username)
        {
            try
            {
                User user = await _userRepo.GetUserByUsername(username);
                if (user != null)
                {
                    return Ok(user);
                }
                else
                {
                    return NotFound("User not found");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpPost("AddUser")]
        public async Task<ActionResult> AddUser(User user)
        {
            try
            {
                await _userRepo.Register(user);
                return Ok("User added successfully");
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpDelete("{userName}")]
        public async Task<ActionResult> DeleteUser(string userName)
        {
            try
            {
                await _userRepo.DeleteUser(userName);
                return Ok("User deleted successfully");
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpPost("Login")]
        public async Task<ActionResult> Login(User user)
        {
            try
            {
                User loggedInUser = await _userRepo.Login(user.UserName, user.Password);
                if (loggedInUser != null)
                {
                    if (loggedInUser.UserName == "admin")
                    {
                        // Login as admin
                        return Ok(new { message = "Logged in as admin", isAdmin = true });
                    }
                    else
                    {
                        // Login as normal user
                        return Ok(new { message = "Logged in as a normal user", isAdmin = false });
                    }
                }
                else
                {
                    return Unauthorized("Invalid credentials");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }


        [HttpPost("ForgotPassword")]
        public async Task<ActionResult> ForgotPassword(User user, string newPassword)
        {
            try
            {
                await _userRepo.ForgotPassword(user, newPassword);
                return Ok("Password reset successfully");
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }
    }
}
Update method not worked, please check update the code in frontend.
