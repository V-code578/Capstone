import React, { useState } from "react";
import { Form, Button } from "react-bootstrap";
import { useNavigate } from "react-router-dom";

const ForgotPasswordPage = () => {
    const [userName, setUserName] = useState("");
    const [newPassword, setNewPassword] = useState("");
    const [validationError, setValidationError] = useState("");
    const navigate = useNavigate();

    const validateForm = () => {
        if (!userName) {
            setValidationError("Username is required");
            return false;
        }
        if (!newPassword) {
            setValidationError("New password is required");
            return false;
        }
        return true;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (validateForm()) {
            const user = {
                userName: userName,
                password: newPassword,
            };

            try {
                const response = await fetch(
                    "http://localhost:5183/api/User/ForgotPassword",
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify(user),
                    }
                );

                if (response.ok) {
                    navigate("/login");
                } else {
                    const error = await response.json();
                    setValidationError(error.message);
                }
            } catch (error) {
                console.error(error);
                setValidationError("An error occurred. Please try again.");
            }
        }
    };

    return (
        <div className="container">
            <div className="row justify-content-center">
                <div className="col-md-6">
                    <h1>Forgot Password</h1>
                    <Form onSubmit={handleSubmit}>
                        <Form.Group controlId="formUserName">
                            <Form.Label>Username</Form.Label>
                            <Form.Control
                                type="text"
                                placeholder="Enter username"
                                value={userName}
                                onChange={(e) => setUserName(e.target.value)}
                            />
                        </Form.Group>

                        <Form.Group controlId="formNewPassword">
                            <Form.Label>New Password</Form.Label>
                            <Form.Control
                                type="password"
                                placeholder="Enter new password"
                                value={newPassword}
                                onChange={(e) => setNewPassword(e.target.value)}
                            />
                        </Form.Group>

                        <Button variant="primary" type="submit">
                            Reset Password
                        </Button>
                    </Form>

                    {validationError && (
                        <div className="alert alert-danger mt-3" role="alert">
                            {validationError}
                        </div>
                    )}

                    <p className="mt-3">
                        <a href="/login">Back to Login</a>
                    </p>
                </div>
            </div>
        </div>
    );
};

export default ForgotPasswordPage;

UserController.cs:
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using OnlineShopping.Models;
using OnlineShopping.Repos;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace webapi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly IUserRepo _userRepo;

        public UserController(IUserRepo repo)
        {
            _userRepo = repo;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            List<User> users = await _userRepo.GetAllUsers();
            return Ok(users);
        }

        [HttpGet("{userName}")]
        public async Task<ActionResult> GetOne(string userName)
        {
            try
            {
                User user = await _userRepo.GetUserByUsername(userName);
                if (user != null)
                {
                    return Ok(user);
                }
                else
                {
                    return NotFound("User not found");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpGet("GetUserByName/{username}")]
        public async Task<ActionResult> GetOneUser(string username)
        {
            try
            {
                User user = await _userRepo.GetUserByUsername(username);
                if (user != null)
                {
                    return Ok(user);
                }
                else
                {
                    return NotFound("User not found");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpPost("AddUser")]
        public async Task<ActionResult> AddUser(User user)
        {
            try
            {
                await _userRepo.Register(user);
                return Ok("User added successfully");
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpDelete("{userName}")]
        public async Task<ActionResult> DeleteUser(string userName)
        {
            try
            {
                await _userRepo.DeleteUser(userName);
                return Ok("User deleted successfully");
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpPost("Login")]
        public async Task<ActionResult> Login(User user)
        {
            try
            {
                User loggedInUser = await _userRepo.Login(user.UserName, user.Password);
                if (loggedInUser != null)
                {
                    if (loggedInUser.UserName == "admin")
                    {
                        // Login as admin
                        return Ok(new { message = "Logged in as admin", isAdmin = true });
                    }
                    else
                    {
                        // Login as normal user
                        return Ok(new { message = "Logged in as a normal user", isAdmin = false });
                    }
                }
                else
                {
                    return Unauthorized("Invalid credentials");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }


        [HttpPost("ForgotPassword")]
        public async Task<ActionResult> ForgotPassword(User user, string newPassword)
        {
            try
            {
                await _userRepo.ForgotPassword(user, newPassword);
                return Ok("Password reset successfully");
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }
    }
}
Please check Forgot Password method in UserController and send the data using web api.
