import React, { useState, useEffect } from 'react';
import { Container, Table, Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

const Cart = () => {
const [cartItems, setCartItems] = useState([]);
const navigate = useNavigate();

javascript
Copy
useEffect(() => {
    fetchCartItems();
}, []);

const fetchCartItems = async () => {
    try {
        const loggedInUser = sessionStorage.getItem('username');

        // Fetch cart items for the logged in user
        const cartResponse = await fetch(`https://localhost:7075/api/Cart/CartByName/${loggedInUser}`);
        const cartData = await cartResponse.json();

        // Fetch product details for each item in the cart
        const cartItemsWithDetails = await Promise.all(
            cartData.map(async (item) => {
                // Fetch product details using productId
                const productResponse = await fetch(`https://localhost:7075/api/Product/ProductById/${item.productId}`);
                const productData = await productResponse.json();

                return {
                    ...item,
                    image: productData.imagePath, // Assuming the image path is provided by the API
                    name: productData.productName,
                    price: productData.price
                };
            })
        );

        setCartItems(cartItemsWithDetails);
    } catch (error) {
        console.error('Error fetching cart items:', error);
    }
};

const removeFromCart = async (username, productId) => {
try {
    const response = await fetch(`https://localhost:7075/api/Cart/remove?userName=${username}&productId=${productId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        },
    });
    if (response.ok) {
        console.log('Item removed from cart:', productId);
        fetchCartItems(); // Fetch updated cart items after removing
    } else {
        console.error('Failed to remove item from cart:', response.statusText);
    }
} catch (error) {
    console.error('Error removing item from cart:', error);
}
};

javascript
Copy
const checkout = async () => {
    try {
        const loggedInUser = sessionStorage.getItem('username');
        const response = await fetch(`https://localhost:7075/api/Cart/Checkout/${loggedInUser}`, {
            method: 'POST'
        });
        if (response.ok) {
            console.log('Checkout successful');
            navigate('/checkout-success'); // Navigate to checkout success page
        } else {
            console.error('Failed to checkout:', response.statusText);
        }
    } catch (error) {
        console.error('Error during checkout:', error);
    }
};

return (
    <Container>
        <h2 className="my-4">Cart</h2>
        {cartItems.length > 0 ? (
            <Table striped bordered hover>
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {cartItems.map((item, index) => (
                        <tr key={`${item.username}-${item.productId}-${index}`}>
                            <td><img src={`/assets/${item.image}`} alt={item.name} style={{ width: '50px', height: 'auto' }} /></td>
                            <td>{item.name}</td>
                            <td>${item.price}</td>
                            <td>
                                <Button variant="danger" onClick={() => removeFromCart(item.username, item.productId)}>Remove</Button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </Table>
        ) : (
            <p>Your cart is empty.</p>
        )}
        <Button variant="primary" onClick={checkout}>Checkout</Button>
    </Container>
);
};

export default Cart; Remove From Cart functionality is not working it shows internal server error, So please refer below cart page for reference to provide the correct RemoveFromCart Functionality. import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button, Card, ListGroup } from 'react-bootstrap';

function Cart(props) {
const [carts, setCarts] = useState([]);
const navigate = useNavigate();
const [products, setProducts] = useState([]);

javascript
Copy
useEffect(() => {
    const fetchCartData = async () => {
        try {
            const response = await fetch(`https://localhost:7077/api/Cart/CartByUserName/${props.username}`);
            if (!response.ok) {
                throw new Error('Failed to fetch cart data');
            }
            const cartData = await response.json();
            setCarts(cartData);
            const productIds = cartData.map((cart) => cart.productId);
            const productResponses = await Promise.all(
                productIds.map((productId) => fetch(`https://localhost:7077/api/Product/ProductById/${productId}`))
            );
            const productData = await Promise.all(productResponses.map((response) => response.json()));
            setProducts(productData);
        } catch (error) {
            console.error('Error fetching cart data:', error.message);
        }
    };

    fetchCartData();
}, [props.username]);

const removeFromCart = async (productId) => {
    try {
        const response = await fetch('https://localhost:7077/api/Cart/remove/${props.username}/${productId}', {
            method: 'DELETE',
            headers: {
            'Content-Type': 'application/json',
        },
     });

    if (!response.ok) {
        throw new Error('Failed to remove product from cart');
    }

    // Refresh cart data after removing
    const updatedCartData = carts.filter((cart) => cart.productId !== productId);
    setCarts(updatedCartData);
    console.log('Product removed from cart');
    // You can display a success message to the user if needed
} catch (error) {
    console.error('Error removing from cart:', error.message);
    // You can display an error message to the user if needed
}
};

javascript
Copy
const clearCart = async () => {
    try {
        const response = await fetch(`https://localhost:7077/api/Cart/Clear/${props.username}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (!response.ok) {
            throw new Error('Failed to clear cart');
        }

        // Clear cart data
        setCarts([]);
    } catch (error) {
        console.error('Error clearing cart:', error.message);
    }
};

const handleBuyNow = async () => {
    try {
        const response = await fetch('https://localhost:7077/api/Order/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (!response.ok) {
            throw new Error('Failed to complete the purchase');
        }

        navigate('/order');
        console.log('Purchase successful!');
    } catch (error) {
        console.error('Error during purchase:', error.message);
    }
};

return (
    <div className="cart-container">
        <h2 className="main-heading">Your Cart</h2>
        <div className="underline"></div> <br />

        {carts.length > 0 ? (
            <>
                <ListGroup>
                    {carts.map((cart, index) => (
                        <ListGroup.Item key={cart.productId}>
                            <Card>
                                <Card.Body>
                                    <Card.Title>{products[index]?.productName}</Card.Title>
                                    <Card.Text>
                                        <strong>Price:</strong> {products[index]?.price}
                                        <br />
                                        <strong>Description:</strong> {products[index]?.description}
                                    </Card.Text>
                                    <Button variant="danger" onClick={() => removeFromCart(cart.productId)}>
                                        Remove
                                    </Button>
                                </Card.Body>
                            </Card>
                        </ListGroup.Item>
                    ))}
                </ListGroup>

                <div className="cart-buttons">
                    <Button variant="secondary" onClick={clearCart}>
                        Clear Cart
                    </Button>
                    <Button variant="primary" onClick={handleBuyNow}>
                        Buy Now
                    </Button>
                </div>
            </>
        ) : (
            <p>Your cart is empty.</p>
        )}
    </div>
);
}

export default Cart;
