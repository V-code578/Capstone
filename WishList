WishListController.cs :                                                                                                                                 using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using OnlineShopping.Models;
using OnlineShopping.Repos;

namespace webapi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class WishListController : ControllerBase
    {
        IWishListRepo wishlistRepo;

        public WishListController(IWishListRepo repo)
        {
             wishlistRepo = repo;
        }

        [HttpGet("ById/{wishListId}")]
        public async Task<ActionResult> GetWishListByWishId(int wishListId)
        {
            try
            {
                WishList wishlist = await wishlistRepo.GetWishListByWishListId(wishListId);
                return Ok(wishlist);
            }
            catch (Exception ex)
            {
                return NotFound(ex.Message);
            }
        }

        [HttpGet("ByUserId/{userName}")]
        public async Task<ActionResult> GetWishListByUserId(string userName)
        {
            try
            {
                List<WishList> wishLists = await wishlistRepo.GetWishListByUserName(userName);
                return Ok(wishLists);
            }
            catch (Exception ex)
            {
                return NotFound(ex.Message);
            }
        }

        [HttpPost]
        public async Task<ActionResult> AddToWishList(WishList wishList)
        {
            await wishlistRepo.AddToWishList(wishList);
            return Created($"api/wishlist/{wishList.WishListId}", wishList);
        }

        [HttpDelete("DeleteById/{wishListId}")]
        public async Task<ActionResult> RemoveFromWishList(int wishListId)
        {
            await wishlistRepo.RemoveFromWishList(wishListId);
            return Ok();

        }

        [HttpDelete("Clear/{userName}")]
        public async Task<ActionResult> ClearWishList(string userName)
        {
            await wishlistRepo.ClearWishList(userName);
            return Ok();
        }

    }
}
MensShirts.jsx: import React, { useState, useEffect } from 'react';
import { Card, Button, Container, Row, Col } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

const MensShirts = () => {
    const [products, setProducts] = useState([]);
    const navigate = useNavigate();

    useEffect(() => {
        fetchData();
    }, []);

    const fetchData = async () => {
        try {
            const response = await fetch('https://localhost:7075/api/Product/ProductByCategory/1');
            const data = await response.json();
            const updatedData = data.map(product => {
                return {
                    ...product,
                    imagePath: product.imagePath // Use the image path from the database here
                };
            });
            setProducts(updatedData);
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    };

    const addToCart = async (productId) => {
        try {
            const loggedInUser = sessionStorage.getItem('username');

            if (!loggedInUser) {
                navigate('/login'); // Navigate to login page if user is not logged in
                return;
            }

            const response = await fetch('https://localhost:7075/api/Cart/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    userName: loggedInUser,
                    productId: productId,
                    quantity: 1 // You can adjust the quantity as needed
                })
            });
            if (response.ok) {
                console.log('Product added to cart:', productId);
                navigate('/Cart'); // Navigate to cart page after adding to cart
            } else {
                console.error('Failed to add product to cart:', response.statusText);
            }
        } catch (error) {
            console.error('Error adding product to cart:', error);
        }
    };

    const addToWishlist = (productId) => {
        try {
            const loggedInUser = sessionStorage.getItem('username');

            if (!loggedInUser) {
                navigate('/login'); // Navigate to login page if user is not logged in
                return;
            }

            const response = await fetch('https://localhost:7075/api/Cart/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    userName: loggedInUser,
                    productId: productId,
                    quantity: 1 // You can adjust the quantity as needed
                })
            });
            if (response.ok) {
                console.log('Product added to cart:', productId);
                navigate('/Cart'); // Navigate to cart page after adding to cart
            } else {
                console.error('Failed to add product to cart:', response.statusText);
            }
        } catch (error) {
            console.error('Error adding product to cart:', error);
        }
    };

    return (
        <Container>
            <h2 className="my-4">Men's Shirts</h2>
            <Row>
                {products.map(product => (
                    <Col key={product.productId} md={12} className="mb-4">
                        <Card className="flex-row">
                            <Card.Img src={`/assets/${product.imagePath}`} alt={product.productName} style={{ width: '200px', height: 'auto' }} />

                            <Card.Body>
                                <Card.Title>{product.productName}</Card.Title>
                                <Card.Text>{product.description}</Card.Text>
                                <Card.Text>Price: ${product.price}</Card.Text>
                                <Button variant="primary" onClick={() => addToCart(product.productId)}>Add to Cart</Button>{' '}
                                <Button variant="secondary" onClick={() => addToWishlist(product.productId)}>Add to Wishlist</Button>
                            </Card.Body>
                        </Card>
                    </Col>
                ))}
            </Row>
        </Container>
    );
};

export default MensShirts;
WishList.jsx: 
import React, { useState, useEffect } from 'react';
import { Container, Table, Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

const WishList = (props) => {
    const [wishlistItems, setWishlistItems] = useState([]);
    const navigate = useNavigate();

    useEffect(() => {
        fetchWishlistItems();
    }, []);

    const fetchWishlistItems = async () => {
        try {
            const loggedInUser = sessionStorage.getItem('username');

            // Fetch wishlist items for the logged in user
            const wishlistResponse = await fetch(`https://localhost:7075/api/Wishlist/WishlistByName/${loggedInUser}`);
            const wishlistData = await wishlistResponse.json();

            // Fetch product details for each item in the wishlist
            const wishlistItemsWithDetails = await Promise.all(
                wishlistData.map(async (item) => {
                    // Fetch product details using productId
                    const productResponse = await fetch(`https://localhost:7075/api/Product/ProductById/${item.productId}`);
                    const productData = await productResponse.json();

                    return {
                        ...item,
                        image: productData.imagePath, // Assuming the image path is provided by the API
                        name: productData.productName,
                        price: productData.price
                    };
                })
            );

            setWishlistItems(wishlistItemsWithDetails);
        } catch (error) {
            console.error('Error fetching wishlist items:', error);
        }
    };

    const removeFromWishlist = async (productId) => {
        try {
            const loggedInUser = sessionStorage.getItem('username');
            const response = await fetch(`https://localhost:7075/api/Wishlist/Remove?username=${loggedInUser}&productId=${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
            });
            if (response.ok) {
                console.log('Item removed from wishlist:', productId);
                fetchWishlistItems(); // Fetch updated wishlist items after removing
            } else {
                console.error('Failed to remove item from wishlist:', response.statusText);
            }
        } catch (error) {
            console.error('Error removing item from wishlist:', error);
        }
    };

    const addToCart = async (productId) => {
        try {
            const loggedInUser = sessionStorage.getItem('username');
            const response = await fetch(`https://localhost:7075/api/Cart/Add?username=${loggedInUser}&productId=${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
            });
            if (response.ok) {
                console.log('Item added to cart:', productId);
                // Optionally, you can navigate to the cart page here
            } else {
                console.error('Failed to add item to cart:', response.statusText);
            }
        } catch (error) {
            console.error('Error adding item to cart:', error);
        }
    };

    return (
        <Container>
            <h2 className="my-4">Wishlist</h2>
            {wishlistItems.length > 0 ? (
                <Table striped bordered hover>
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {wishlistItems.map((item, index) => (
                            <tr key={`${item.username}-${item.productId}-${index}`}>
                                <td><img src={`/assets/${item.image}`} alt={item.name} style={{ width: '50px', height: 'auto' }} /></td>
                                <td>{item.name}</td>
                                <td>${item.price}</td>
                                <td>
                                    <Button variant="danger" onClick={() => removeFromWishlist(item.productId)}>Remove</Button>
                                    <Button variant="primary" onClick={() => addToCart(item.productId)}>Add to Cart</Button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </Table>
            ) : (
                <p>Your wishlist is empty.</p>
            )}
        </Container>
    );
};

export default WishList;

Please update the addToWishList function by using WishListController.cs. and also update all the functions in WishList.jsx based on Controller methods.

