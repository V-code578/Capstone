import React, { useState } from "react";

const AdminProduct = () => {
  const [productData, setProductData] = useState({
    productName: "",
    description: "",
    price: 0,
    categoryId: 0,
    file: null,
  });

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setProductData({
      ...productData,
      [name]: value,
    });
  };

  const handleFileChange = (event) => {
    setProductData({
      ...productData,
      file: event.target.files[0],
    });
  };

  const handleSubmit = async (event) => {
    event.preventDefault();

    const formData = new FormData();
    formData.append("productName", productData.productName);
    formData.append("description", productData.description);
    formData.append("price", productData.price);
    formData.append("categoryId", productData.categoryId);
    formData.append("file", productData.file);

    try {
      const response = await fetch("http://localhost:5094/api/Product", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        throw new Error("Failed to add product.");
      }

      alert("Product added successfully!");
    } catch (error) {
      console.error("Error adding product:", error);
      alert("Failed to add product. Please try again.");
    }
  };

  return (
    <div>
      <h1>Add Product</h1>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Product Name:</label>
          <input type="text" name="productName" onChange={handleInputChange} />
        </div>
        <div>
          <label>Description:</label>
          <input type="text" name="description" onChange={handleInputChange} />
        </div>
        <div>
          <label>Price:</label>
          <input type="number" name="price" onChange={handleInputChange} />
        </div>
        <div>
          <label>Category ID:</label>
          <input type="number" name="categoryId" onChange={handleInputChange} />
        </div>
        <div>
          <label>Image:</label>
          <input type="file" onChange={handleFileChange} />
        </div>
        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

export default AdminProduct;


[HttpPost]
[Consumes("multipart/form-data")]
public async Task<ActionResult> AddProduct([FromForm] IFormFile file, [FromForm] Product product)
{
    if (file == null || product == null)
    {
        return BadRequest();
    }

    try
    {
        // Read the file content into a byte array
        using (var ms = new MemoryStream())
        {
            await file.CopyToAsync(ms);
            product.ImageData = ms.ToArray();
        }

        await _productRepo.AddProduct(product);
        return Created($"api/product/{product.ProductId}", product);
    }
    catch (Exception ex)
    {
        return StatusCode(500, ex.Message);
    }
}

Program.cs:
using OnlineShopping.Models;
using OnlineShopping.Repos;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddScoped<IUserRepo, EFUserRepo>();
builder.Services.AddScoped<IProductRepo, EFProductRepo>();
builder.Services.AddScoped<ICategoryRepo, EFCategoryRepo>();
builder.Services.AddScoped<ICartRepo, EFCartRepo>();
builder.Services.AddScoped<IOrderRepo, EFOrderRepo>();
builder.Services.AddScoped<IWishListRepo, EFWishListRepo>();
builder.Services.AddCors(options =>
{
    options.AddPolicy("MyPolicy", builder => builder.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod());
});

builder.Services.AddDbContext<OnlineShoppingDbContext>();
var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseCors("MyPolicy");
app.UseAuthentication();

app.UseAuthorization();

app.MapControllers();

app.Run();
