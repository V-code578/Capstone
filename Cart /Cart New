MensShirts.jsx:
import React, { useState, useEffect } from 'react';
import { Card, Button, Container, Row, Col } from 'react-bootstrap';

const MensShirts = () => {
    const [products, setProducts] = useState([]);

    useEffect(() => {
        fetchData();
    }, []);

    const fetchData = async () => {
        try {
            const response = await fetch('https://localhost:7075/api/Product/ProductByCategory/1');
            const data = await response.json();
            const updatedData = data.map(product => {
                return {
                    ...product,
                    imagePath: product.imagePath // Use the image path from the database here
                };
            });
            setProducts(updatedData);
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    };

    const addToCart = (productId) => {
        console.log('Product added to cart:', productId);
    };

    const addToWishlist = (productId) => {
        console.log('Product added to wishlist:', productId);
    };

    return (
        <Container>
            <h2 className="my-4">Men's Shirts</h2>
            <Row>
                {products.map(product => (
                    <Col key={product.productId} md={12} className="mb-4">
                        <Card className="flex-row">
                            <Card.Img src={`/assets/${product.imagePath}`} alt={product.productName} style={{ width: '200px', height: 'auto' }} />

                            <Card.Body>
                                <Card.Title>{product.productName}</Card.Title>
                                <Card.Text>{product.description}</Card.Text>
                                <Card.Text>Price: ${product.price}</Card.Text>
                                <Button variant="primary" onClick={() => addToCart(product.productId)}>Add to Cart</Button>{' '}
                                <Button variant="secondary" onClick={() => addToWishlist(product.productId)}>Add to Wishlist</Button>
                            </Card.Body>
                        </Card>
                    </Col>
                ))}
            </Row>
        </Container>
    );
};

export default MensShirts;
Cart.cs:
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace OnlineShopping.Models
{
    [Table("Cart")]
    [PrimaryKey("UserName", "ProductId")]
    public class Cart
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [ForeignKey("User")]
        public string UserName { get; set; }

        public virtual User? User { get; set; }

        [ForeignKey("Product")]
        public int ProductId { get; set; }

        public virtual Product? Product { get; set; }

        [Required]
        public int Quantity { get; set; }

        
    }
}
Product.cs Model:
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OnlineShopping.Models
{
    [Table("Product")]
    public class Product
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int ProductId { get; set; }

        [Required]
        [StringLength(30)] // Adjust the length as needed
        public string ProductName { get; set; }

        [Required]
        [StringLength(50)]
        public string Description { get; set; }

        [Required]
        [Column(TypeName = "decimal(18, 2)")] // Adjust precision and scale as needed
        public decimal Price { get; set; }

        [ForeignKey("Category")]
        public int CategoryId { get; set; }

        public virtual Category? Category { get; set; }

        [Required]
        [StringLength(255)]
        public string ImagePath { get; set; } // New attribute for storing the image file path

        public virtual ICollection<Cart> Carts { get; set; }
        public virtual ICollection<WishList> WishLists { get; set; }

        public Product()
        {
            Carts = new HashSet<Cart>();
            WishLists = new HashSet<WishList>();
        }
    }
}
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using OnlineShopping.Models;
using OnlineShopping.Repos;

namespace webapi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CartController : ControllerBase
    {
        ICartRepo cartRepo;

        public CartController(ICartRepo repo)
        {
            cartRepo = repo;
        }

         [HttpGet("CartByName/{username}")]
        public async Task<ActionResult> GetByUserName(string userName)
        {
            try
            {
                List<Cart> carts = await cartRepo.GetCartByUserName(userName);
                return Ok(carts);
            }
            catch (Exception ex)
            {
                return NotFound(ex.Message);
            }

        }

        [HttpGet("CartByUserNameandProductId/{id}/{productId}")]
        public async Task<ActionResult> GetByUserNameAndProductId(string userName, int productId)
        {
            try
            {
                Cart cart = await cartRepo.GetCartByUserNameAndProductId(userName, productId);
                return Ok(cart);
            }
            catch (Exception ex)
            {
                return NotFound(ex.Message);
            }
        }


        [HttpGet("GetAllCarts")]
        public async Task<ActionResult> GetAll()
        {
            try
            {
                List<Cart> carts = await cartRepo.GetAllCarts();
                return Ok(carts);
            }
            catch (Exception ex)
            {
                return NotFound(ex.Message);
            }
        }


        [HttpPost("Add")]
        public async Task<ActionResult> Add(Cart cart)
        {
            await cartRepo.AddToCart(cart);
            return Created($"api/cart/{cart.UserName}", cart);
        }

        [HttpPut]
        public async Task<ActionResult> Update(string userName, int productId, Cart cart)
        {
            await cartRepo.UpdateCart(userName, productId, cart);
            return Ok(cart);
        }

        [HttpDelete("remove")]
        public async Task<ActionResult> Remove(string userName, int productId)
        {
            await cartRepo.RemoveFromCart(userName, productId);
            return Ok();
        }

        [HttpDelete("Clear/{userName}")]
        public async Task<ActionResult> Clear(string userName)
        {
            await cartRepo.GetCartByUserName(userName);
            return Ok();
        }
    }
}

Cart.jsx:
import React, { useState, useEffect } from 'react';
import { Container, Table, Button } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';

const Cart = () => {
    const [cartItems, setCartItems] = useState([]);
    const navigate = useNavigate();

    useEffect(() => {
        fetchCartItems();
    }, []);

    const fetchCartItems = async () => {
        try {
            const loggedInUser = sessionStorage.getItem('username');

            // Fetch cart items for the logged in user
            const cartResponse = await fetch(`https://localhost:7075/api/Cart/CartByName/${loggedInUser}`);
            const cartData = await cartResponse.json();

            // Fetch product details for each item in the cart
            const cartItemsWithDetails = await Promise.all(
                cartData.map(async (item) => {
                    const productResponse = await fetch(`https://localhost:7075/api/Product/${item.productId}`);
                    const productData = await productResponse.json();

                    return {
                        ...item,
                        image: productData.image,
                        name: productData.name,
                        price: productData.price
                    };
                })
            );

            setCartItems(cartItemsWithDetails);
        } catch (error) {
            console.error('Error fetching cart items:', error);
        }
    };

    const removeFromCart = async (cartItemId) => {
        try {
            const response = await fetch(`https://localhost:7075/api/Cart/Remove/${cartItemId}`, {
                method: 'DELETE'
            });
            if (response.ok) {
                console.log('Item removed from cart:', cartItemId);
                fetchCartItems(); // Fetch updated cart items after removing
            } else {
                console.error('Failed to remove item from cart:', response.statusText);
            }
        } catch (error) {
            console.error('Error removing item from cart:', error);
        }
    };

    const checkout = async () => {
        try {
            const loggedInUser = sessionStorage.getItem('username');
            const response = await fetch(`https://localhost:7075/api/Cart/Checkout/${loggedInUser}`, {
                method: 'POST'
            });
            if (response.ok) {
                console.log('Checkout successful');
                navigate('/checkout-success'); // Navigate to checkout success page
            } else {
                console.error('Failed to checkout:', response.statusText);
            }
        } catch (error) {
            console.error('Error during checkout:', error);
        }
    };

    return (
        <Container>
            <h2 className="my-4">Cart</h2>
            {cartItems.length > 0 ? (
                <Table striped bordered hover>
                    <thead>
                        <tr>
                            <th>Image</th>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {cartItems.map(item => (
                            <tr key={item.cartItemId}>
                                <td><img src={`/assets/${product.imagePath}`} alt={item.name} style={{ width: '50px', height: 'auto' }} /></td>
                                <td>{item.name}</td>
                                <td>${item.price}</td>
                                <td>
                                    <Button variant="danger" onClick={() => removeFromCart(item.cartItemId)}>Remove</Button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </Table>
            ) : (
                <p>Your cart is empty.</p>
            )}
            <Button variant="primary" onClick={checkout}>Checkout</Button>
        </Container>
    );
};

export default Cart; 

Please fetch the Product image, ProductName, Price using ProductID which is stored in the Cart Table for respective username. Then Display these things in Frontend page Cart.jsx.
