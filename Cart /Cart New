MensShirts.jsx:
import React, { useState, useEffect } from 'react';
import { Card, Button, Container, Row, Col } from 'react-bootstrap';

const MensShirts = () => {
    const [products, setProducts] = useState([]);

    useEffect(() => {
        fetchData();
    }, []);

    const fetchData = async () => {
        try {
            const response = await fetch('https://localhost:7075/api/Product/ProductByCategory/1');
            const data = await response.json();
            const updatedData = data.map(product => {
                return {
                    ...product,
                    imagePath: product.imagePath // Use the image path from the database here
                };
            });
            setProducts(updatedData);
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    };

    const addToCart = (productId) => {
        console.log('Product added to cart:', productId);
    };

    const addToWishlist = (productId) => {
        console.log('Product added to wishlist:', productId);
    };

    return (
        <Container>
            <h2 className="my-4">Men's Shirts</h2>
            <Row>
                {products.map(product => (
                    <Col key={product.productId} md={12} className="mb-4">
                        <Card className="flex-row">
                            <Card.Img src={`/assets/${product.imagePath}`} alt={product.productName} style={{ width: '200px', height: 'auto' }} />

                            <Card.Body>
                                <Card.Title>{product.productName}</Card.Title>
                                <Card.Text>{product.description}</Card.Text>
                                <Card.Text>Price: ${product.price}</Card.Text>
                                <Button variant="primary" onClick={() => addToCart(product.productId)}>Add to Cart</Button>{' '}
                                <Button variant="secondary" onClick={() => addToWishlist(product.productId)}>Add to Wishlist</Button>
                            </Card.Body>
                        </Card>
                    </Col>
                ))}
            </Row>
        </Container>
    );
};

export default MensShirts;
Cart.cs:
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace OnlineShopping.Models
{
    [Table("Cart")]
    [PrimaryKey("UserName", "ProductId")]
    public class Cart
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [ForeignKey("User")]
        public string UserName { get; set; }

        public virtual User? User { get; set; }

        [ForeignKey("Product")]
        public int ProductId { get; set; }

        public virtual Product? Product { get; set; }

        [Required]
        public int Quantity { get; set; }

        
    }
}

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using OnlineShopping.Models;
using OnlineShopping.Repos;

namespace webapi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CartController : ControllerBase
    {
        ICartRepo cartRepo;

        public CartController(ICartRepo repo)
        {
            cartRepo = repo;
        }

        [HttpGet("CartById/{id}")]
        public async Task<ActionResult> GetByUserName(string userName)
        {
            try
            {
                List<Cart> carts = await cartRepo.GetCartByUserName(userName);
                return Ok(carts);
            }
            catch (Exception ex)
            {
                return NotFound(ex.Message);
            }

        }

        [HttpGet("CartByIdandProductId/{id}/{productId}")]
        public async Task<ActionResult> GetByIdAndProductId(string userName, int productId)
        {
            try
            {
                Cart cart = await cartRepo.GetCartByUserNameAndProductId(userName, productId);
                return Ok(cart);
            }
            catch (Exception ex)
            {
                return NotFound(ex.Message);
            }
        }


        [HttpGet("GetAllCarts")]
        public async Task<ActionResult> GetAll()
        {
            try
            {
                List<Cart> carts = await cartRepo.GetAllCarts();
                return Ok(carts);
            }
            catch (Exception ex)
            {
                return NotFound(ex.Message);
            }
        }


        [HttpPost("Add")]
        public async Task<ActionResult> Add(Cart cart)
        {
            await cartRepo.AddToCart(cart);
            return Created($"api/cart/{cart.UserName}", cart);
        }

        [HttpPut]
        public async Task<ActionResult> Update(string userName, int productId, Cart cart)
        {
            await cartRepo.UpdateCart(userName, productId, cart);
            return Ok(cart);
        }

        [HttpDelete("remove")]
        public async Task<ActionResult> Remove(string userName, int productId)
        {
            await cartRepo.RemoveFromCart(userName, productId);
            return Ok();
        }

        [HttpDelete("Clear/{userName}")]
        public async Task<ActionResult> Clear(string userName)
        {
            await cartRepo.GetCartByUserName(userName);
            return Ok();
        }
    }
}

Please design the Cart page using React JS and Bootstrap. Which contains Product Image, Product name, Price, Quantity dropdown.Please add the Quantity dropdown in MensShirts.jsx page for each cards. When i click on add to cart button in Mens Shirts.jsx page , UserName who is logged in, Product Id, Quantity should store on Cart table. Then The Front end of Cart Page displays Product Image which is accessible from MensShirts.jsx page or Product table. Then Price should be access from Product table, Finally the quantity dropdown will be given, If person wants to edit the quantity, then use that dropdown to update the quantity. 
